const BaseEvent = require('../../utils/structures/BaseEvent');
const { Collection } = require('discord.js');

module.exports = class GuildAuditLogEntryEvent extends BaseEvent {
    constructor() {
        super('guildAuditLogEntry');
        this.actionCounts = new Collection();
        this.ACTION_LIMIT = 3;
        this.TIME_WINDOW = 60 * 60 * 1000; // 1 hour in milliseconds
    }

    async run(client, auditLogEntry) {
        const { executorId, action } = auditLogEntry;
        const key = `${executorId}-${action}`;
        
        // Get current count or initialize
        const currentCount = this.actionCounts.get(key) || { count: 0, timestamp: Date.now() };
        
        // Reset if time window has passed
        if (Date.now() - currentCount.timestamp > this.TIME_WINDOW) {
            currentCount.count = 0;
            currentCount.timestamp = Date.now();
        }
        
        currentCount.count++;
        this.actionCounts.set(key, currentCount);
        
        // Only proceed with ban logic if threshold is exceeded
        if (currentCount.count <= this.ACTION_LIMIT) {
            return;
        }
        
        // Cache the guild to avoid repeated fetches
        const guild = auditLogEntry.guild;
        
        try {
            // Check if we've already handled this threshold breach
            const handledKey = `handled-${key}-${Math.floor(currentCount.timestamp / this.TIME_WINDOW)}`;
            if (client.handledAuditThresholds && client.handledAuditThresholds.has(handledKey)) {
                return;
            }
            
            // Mark as handled
            if (!client.handledAuditThresholds) client.handledAuditThresholds = new Map();
            client.handledAuditThresholds.set(handledKey, true);
            
            const member = await guild.members.fetch(executorId);
            
            if (member.bannable) {
                await member.ban({ 
                    reason: `Exceeded action limit: ${action} performed ${currentCount.count} times in ${this.TIME_WINDOW / 1000 / 60} minutes` 
                });
                client.logger.success(`Banned user ${member.user.tag} for exceeding action limit`);
                await client.db.createBan(
                    member.user.id, 
                    member.user.tag, 
                    `Exceeded action limit: ${action} performed ${currentCount.count} times in ${this.TIME_WINDOW / 1000 / 60} minutes`, 
                    'ban', 
                    executorId, 
                    member.user.tag, 
                    Date.now()
                );
            } else {
                client.logger.error(`Unable to ban user ${member.user.tag} due to lack of permissions`);
            }
        } catch (error) {
            client.logger.error('Error banning user:', error);
        }
    }
}
