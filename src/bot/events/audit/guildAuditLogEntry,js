const BaseEvent = require('../../utils/structures/BaseEvent');
const { Collection } = require('discord.js');
const db = require('../../../database/db');
const logger = require('silly-logger');

module.exports = class GuildAuditLogEntryEvent extends BaseEvent {
    constructor() {
        super('guildAuditLogEntry');
        this.actionCounts = new Collection();
        this.ACTION_LIMIT = 3;
        this.TIME_WINDOW = 60 * 60 * 1000; // 1 hour in milliseconds
    }

    async run(client, auditLogEntry) {
        const { executorId, action } = auditLogEntry;
        
        const key = `${executorId}-${action}`;
        
        const currentCount = this.actionCounts.get(key) || { count: 0, timestamp: Date.now() };
        
        if (Date.now() - currentCount.timestamp > this.TIME_WINDOW) {
            currentCount.count = 0;
            currentCount.timestamp = Date.now();
        }
        
        currentCount.count++;
        
        this.actionCounts.set(key, currentCount);
        
        if (currentCount.count > this.ACTION_LIMIT) {
            try {
                const guild = auditLogEntry.guild;
                const member = await guild.members.fetch(executorId);
                
                if (member.bannable) {
                    await member.ban({ reason: `Exceeded action limit: ${action} performed ${currentCount.count} times in ${this.TIME_WINDOW / 1000 / 60} minutes` });
                    logger.success(`Banned user ${member.user.tag} for exceeding action limit`);
                    await db.createBan(member.user.id, member.user.tag, `Exceeded action limit: ${action} performed ${currentCount.count} times in ${this.TIME_WINDOW / 1000 / 60} minutes`, 'ban', executorId, member.user.tag, Date.now());
                } else {
                    logger.error(`Unable to ban user ${member.user.tag} due to lack of permissions`);
                }
            } catch (error) {
                logger.error('Error banning user:', error);
            } finally {
				await db.end();
			}
        }
    }
}
